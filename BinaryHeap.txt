import java.util.Scanner;
import java.util.Arrays;


class BinaryHeap 
{
   private static final int c=2; /**No.of children each node has **/
   private int heapSize;
   private int[] heap;
   
   public BinaryHeap(int capacity)
   {
       heapSize=0;
       heap=new int[capacity+1];
       Arrays.fill(heap,-1);
   }
   
   /** To check if heap is full **/
   public boolean isFull()
   {
       return heapSize==heap.length;
   }
   
   /** To check if heap is empty **/
   public boolean isEmpty()
   {
       return heapSize==0;
   }
      
    /**Clear heap **/
   public void makeEmpty()
   {
       heapSize=0;
   }
   
   /** To get index parent of i **/
   private int parent(int i)
   {
       return (i-1)/c;
   }
   
   /** To get index of k th child of i  **/
   private int kthChild(int i,int k)
   {
       return c*i+k;
   }
   
   /**To insert element **/
   public void insert(int x)
   {
       if (isFull())
           System.out.print("Overflow");
       heap[heapSize++]=x;
       heapifyUp(heapSize-1);
   }
   
   /** To find least element **/
   public int findMin()
   {
       if(isEmpty())
           System.out.print("Underflow");
       return heap[0];
   }
   
   /** To delete min element **/
   public int deleteMin()
   {
       int keyItem=heap[0];
       delete(0);
       return keyItem;
   }
   
   /** To delete element at an index **/
   public int delete(int ind)
   {
       if(isEmpty())
           System.out.print("Underflow Exception");
       int keyItem=heap[ind];
       heap[ind]=heap[heapSize-1];
       heapSize--;
       heapifyDown(ind);
       return keyItem;
   }
   
   /** Function heapifyUp **/
   private void heapifyUp(int childInd)
   {
       int temp=heap[childInd];
       while(childInd > 0 && temp < heap[parent(childInd)])
       {
           heap[childInd]=heap[parent(childInd)];
           childInd=parent(childInd);
       }
       heap[childInd]=temp;
   }
   
   /** Function heapifyDown **/
   private void heapifyDown(int ind)
   {
       int child;
       int temp=heap[ind];
       while(kthChild(ind,1)<heapSize)
       {
           child=minChild(ind);
           if(heap[child]<temp)
               heap[ind]=heap[child];
           else
               break;
           ind=child;
       }
       heap[ind]=temp;
   }
   
   /** To get smallest child **/
   private int minChild(int ind)
   {
       int bestChild=kthChild(ind,1);
       int k=2;
       int pos=kthChild(ind,k);
       while((k<=c) && (pos<heapSize))
       {
          if(heap[pos]<heap[bestChild])
              bestChild=pos;
          pos=kthChild(ind,k++);
       }
       return bestChild;
   }
   
   /** To print heap **/
   public void printHeap()
   {
       System.out.print("\n Heap=");
       for(int i=0;i<heapSize;i++)
           System.out.print(heap[i]+" ");
       System.out.println();
   }
}   
   
   /** Class BinaryHeapTest **/
   public class BinaryHeapTest
   {
       public static void main(String[] args)
       {
            Scanner s=new Scanner(System.in);
            System.out.println("Binary Heap Test\n\n");
            System.out.println("Enter size of Binary Heap");
            
            BinaryHeap bh= new BinaryHeap(s.nextInt());
            
            char ch;
            
            do
            {
                System.out.println("\n Binary Heap Operations");
                System.out.println("1.Insert");
                System.out.println("2.Delete min");
                System.out.println("3.Check full");
                System.out.println("4.Check empty");
                System.out.println("5.Clear");
                
                int choice=s.nextInt();
                switch(choice)
                {
                    case 1:
                        try
                        {
                            System.out.println("Enter integer element to inset");
                            bh.insert(s.nextInt());
                        }
                        catch(Exception e)
                        {
                            System.out.println(e.getMessage());
                        }
                        break;
                    case 2:
                        try
                        {
                            System.out.println("Min element:"+bh.deleteMin());
                            bh.insert(s.nextInt());
                        }
                        catch(Exception e)
                        {
                            System.out.println(e.getMessage());
                        }
                        break;
                    case 3:
                        System.out.println("Full Status="+bh.isFull());
                        break;
                    case 4:
                        System.out.println("Empty Status="+bh.isEmpty());
                        break;
                    case 5:
                        bh.makeEmpty();
                        System.out.println("Heap Cleared\n");
                        break;
                    default:
                        System.out.println("Wrong Entry");
                        break;    
                }
                
                /** Display Heap **/
                bh.printHeap();
                
                System.out.println("\nDo you want to continue?(Type y or n) \n");
                ch=s.next().charAt(0);
            }
            while(ch=='Y' || ch=='y');
       }
   }   
